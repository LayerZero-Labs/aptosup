#!/bin/bash
BIN_PATH="$HOME/.aptosup"
TMP_PATH="$BIN_PATH/tmp"

function validate_input() {
    if [ -z "$APTOS_VERSION" ]; then
        echo "No aptos version provided, exiting"
        exit 1
    fi

    CURR_APTOS_BINARY_PATH="$BIN_PATH/aptos-$APTOS_VERSION"

    # Check if the aptos binary exists
    if [ ! -f "$CURR_APTOS_BINARY_PATH" ]; then
        echo "Aptos binary not found at $CURR_APTOS_BINARY_PATH, please install the version first"
        exit 1
    fi    
}

function remove_aptos() {
    validate_input
    CURR_APTOS_BINARY_PATH="$BIN_PATH/aptos-$APTOS_VERSION"
    rm -f "$CURR_APTOS_BINARY_PATH"
    echo "Aptos binary removed successfully. You need to call set or install to initialize the aptos binary"
}

function set_aptos_version() {
    validate_input
    CURR_APTOS_BINARY_PATH="$BIN_PATH/aptos-$APTOS_VERSION"

    echo "Symlinking $CURR_APTOS_BINARY_PATH to $BIN_PATH/aptos"
    # Remove the existing symlink if it exists
    if [ -L "$BIN_PATH/aptos" ]; then
        rm -f "$BIN_PATH/aptos"
    fi
    ln -s $CURR_APTOS_BINARY_PATH $BIN_PATH/aptos
    echo "Aptos binary updated successfully"
    aptos --version

    # If the aptos binary is not in the path, add it to the path
    if ! command -v aptosup &> /dev/null; then
        echo "########################################################"
        echo "Aptos binary not found in path, you can add it to the current terminal session by running:"
        echo "export PATH=\"$BIN_PATH:\$PATH\""

        echo "You might want to add the following to your ~/.zshrc or ~/.bashrc file for a more permanent solution:"
        echo "echo 'export PATH=\"$BIN_PATH:\$PATH\"' >> ~/.zshrc"
        echo "source ~/.zshrc"
        echo "########################################################"
    fi  
}

function install_aptos() {
    if [ -z "$APTOS_VERSION" ]; then
        echo "No aptos version provided, exiting"
        exit 1
    fi

    echo "Using path for binary installation: $BIN_PATH"
    echo "Trying to set aptos version to: $APTOS_VERSION"

    CURR_APTOS_BINARY_PATH="$BIN_PATH/aptos-$APTOS_VERSION"

    # Check if the bin path for the specified version exists and if it does we set aptos to the existing binary
    if [ -f "$CURR_APTOS_BINARY_PATH" ]; then
        echo "Aptos binary already exists at $CURR_APTOS_BINARY_PATH"
        echo "Using aptos version $APTOS_VERSION as aptos"
    else
        # Aptos needs to be installed from source - i hope you like waiting for a bit. 

        echo "This will install aptos version $APTOS_VERSION"
        echo "Do you want to continue? (y/n)"
        read -p "Enter your choice: " choice
        case $choice in
            y|Y)
                echo "Continuing with installation..."
                ;;
            n|N)
                echo "Exiting..."
                exit 1
                ;;
            *)
                echo "Invalid option: $choice"
                exit 1
                ;;
        esac

        # If we reach this code is means that the aptos binary does not exist
        # So we need to download the aptos binary
        pushd $TMP_PATH
        echo "Downloading aptos-core-aptos-cli-v${APTOS_VERSION}.tar.gz from github - this may take a while..."
        curl -L https://github.com/aptos-labs/aptos-core/archive/refs/tags/aptos-cli-v${APTOS_VERSION}.tar.gz | tar -xz
        mv ./aptos-core-aptos-cli-v${APTOS_VERSION} ./aptos-v${APTOS_VERSION}
        pushd aptos-v${APTOS_VERSION}

        RUST_TOOLCHAIN_VERSION=1.78.0
        
        # Handle the case where the aptos version is 3.5.0
        # This is required because aptos version 3.5.0 installs "cargo machete" which only works on nightly
        if [ "$APTOS_VERSION" == "3.5.0" ]; then
            # Fix for sed compatibility between macOS and Linux
            if [[ "$OSTYPE" == "darwin"* ]]; then
                sed -i '' 's/channel="1.78.0"/channel="nightly"/' rust-toolchain.toml
            else
                # Linux version
                sed -i 's/channel="1.78.0"/channel="nightly"/' rust-toolchain.toml
            fi
        fi

        # Install aptos dependencies
        ./scripts/dev_setup.sh -b -k

        # Build the aptos binary tagged with the rust toolchain version - future proofing for when different versions of aptos are built with different rust toolchains
        cargo +${RUST_TOOLCHAIN_VERSION} build --package aptos --profile cli

        sudo cp -R ./target/cli/aptos $CURR_APTOS_BINARY_PATH
        popd
        popd

        rm -rf aptos-core
    fi
}

function list_versions() {
    installed_versions=$(ls $BIN_PATH | grep aptos- | sed 's/aptos-//g')
    echo "Installed versions at $BIN_PATH:"
    # Format each version on a new line with aptos- prefix
    for version in $installed_versions; do
        echo "aptos-$version"
    done
}

# There are only 5 flags that can be used - they can be used seperately:
# 1. list all available aptos versions called --list or -l
# 2. install new version called --install or -i
# 3. remove installed aptos version called --remove or -r
# 4. set installed aptos version called --set-version or -s
# 5. update aptosup called --update or -u
while getopts "s:li:r:u" opt; do
  case ${opt} in
    s )
      APTOS_VERSION=$OPTARG
      echo "Setting aptos version to: $APTOS_VERSION"
      set_aptos_version
      ;;
    l )
      list_versions
      ;;
    i )
      APTOS_VERSION=$OPTARG
      echo "Installing aptos version: $APTOS_VERSION"
      install_aptos
      ;;
    r )
      APTOS_VERSION=$OPTARG
      echo "Removing aptos version: $APTOS_VERSION"
      remove_aptos
      ;;
    u )
      curl -sSL https://raw.githubusercontent.com/LayerZero-Labs/aptosup/main/aptosup > $BIN_PATH/aptosup
      chmod +x $BIN_PATH/aptosup
      echo "aptosup updated successfully"
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      exit 1
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done
